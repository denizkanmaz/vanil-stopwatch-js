"use strict";function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}function _defineProperty(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}//  Copyright (c) 2018-present, Deniz Kanmaz. All rights reserved.
//  This source code is licensed under the MIT Licence.
//  Use of this source code is governed by a license
//  that can be found in the LICENSE file.
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  LICENSE file for more details.
//  vanil-stopwatch-js v1.0.1
/**
 * Class representing a stopwatch.
 */var Stopwatch=/*#__PURE__*/function(){/**
     * Initializes a new instance of the StopWatch class.
     * @param {boolean} startImmediately The instance starts immediatelly 
     * if this field is true.
     */function a(b){var c=this;_classCallCheck(this,a),_defineProperty(this,"_timeStarted",null),_defineProperty(this,"_timeStoped",null),_defineProperty(this,"_running",!1),_defineProperty(this,"_laps",[]),_defineProperty(this,"split",function(a){c._laps.push({title:a||"Lap ".concat(c._laps.length+1),elapsedTime:c.elapsedTime})}),_defineProperty(this,"start",function(){!0===c._running||(c._laps=[],c._timeStarted=new Date,c._running=!0)}),_defineProperty(this,"stop",function(){c._timeStoped=new Date,c._running=!1}),_defineProperty(this,"reset",function(){c.stop(),c._timeStarted=null,c._timeStoped=null,c._laps=[]}),_defineProperty(this,"restart",function(){c.reset(),c.start()}),!0===b&&this.start()}return _createClass(a,[{key:"laps",/**
     * Gets the collected laps via split function.
     */get:function a(){return this._laps}/**
     * Gets whether the instance is running.
     */},{key:"isRunning",get:function a(){return this._running}/**
     * Starts measuring elapsed time.
     */},{key:"elapsedMilliseconds",/**
     * Gets the total elapsed time, in milliseconds.
     */get:function a(){return null===this._timeStarted?0:this._running?new Date-this._timeStarted:this._timeStoped-this._timeStarted}/**
     * Gets the total elapsed time.
     */},{key:"elapsedTime",get:function a(){return{milliseconds:this.elapsedMilliseconds,seconds:this.elapsedMilliseconds/1e3,minutes:this.elapsedMilliseconds/1e3/60,hours:this.elapsedMilliseconds/1e3/60/60}}}]),a}();"undefined"!=typeof module&&"undefined"!=typeof module.exports&&(module.exports=Stopwatch);
